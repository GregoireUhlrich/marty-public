// This file is part of MARTY.
// 
// MARTY is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// MARTY is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with MARTY. If not, see <https://www.gnu.org/licenses/>.

/**
 * @file libmakefile_data.h
 * @brief 
 * @author Gr√©goire Uhlrich
 * @version 1.0
 * @date 2020-11-05
 */
#pragma once

#include <iostream>

void print_libmakefile_data(std::ostream &out, bool quad, bool clang) {
    out << "# Part common to all libraries generated by CSL\n";
    out << "\n";
    if (clang) {
        out << "CXX     = clang++\n";
        out << "MATH_OPTI = -ffast-math\n";
    }
    else {
        out << "CXX     = g++\n";
#if defined(__APPLE__) || defined(__MACH__)
        out << "MATH_OPTI = -ffast-math\n";
#else
        out << "MATH_OPTI = \\\n"
                "\t\t-fno-math-errno\\\n"
                "\t\t-ffinite-math-only\\\n"
                "\t\t-fno-rounding-math\\\n"
                "\t\t-fno-signaling-nans\\\n"
                "\t\t-fcx-limited-range\\\n"
                "\t\t-fexcess-precision=fast\\\n"
                "\t\t-fno-signed-zeros\\\n"
                "\t\t-fno-trapping-math\\\n"
                "\t\t-fassociative-math\\\n"
                "\t\t-freciprocal-math\n\n";
#endif
    }
    if (!quad)
      out << "CFLAGS = -std=c++17 -O2 $(MATH_OPTI) -Wall -Wextra -Wpedantic -Wno-deprecated-declarations -fPIC\n";
    else
      out << "CFLAGS = -std=c++17 -O2 $(MATH_OPTI) -Wall -Wextra -Wpedantic -Wno-deprecated-declarations -fPIC -DQUAD=1 -DQUADSIZE=16\n";
    out << "\n";
    out << "SRCDIR = src\n";
    out << "INCDIR = include\n";
    out << "OBJDIR = obj\n";
    out << "SCRIPTDIR = script\n";
    out << "SOBJDIR = script/obj\n";
    out << "BINDIR = bin\n";
    out << "LIBDIR = lib\n";
    out << "\n";
    out << "SRC 	 = $(wildcard $(SRCDIR)/*.cpp)\n";
    out << "HEADERS  = $(wildcard $(INCDIR)/*.h)\n";
    out << "OBJ_INIT = $(SRC:$(SRCDIR)/%.cpp=$(OBJDIR)/%.o)\n";
    out << "OBJ 	 = $(filter-out $(OBJDIR)/$(NAME)_pylink.o, $(OBJ_INIT))\n";
    out << "SCRIPTS  = $(wildcard $(SCRIPTDIR)/*.cpp)\n";
    out << "BINARIES = $(SCRIPTS:$(SCRIPTDIR)/%.cpp=%.x)\n";
    out << "SOBJ = $(SCRIPTS:$(SCRIPTDIR)/%.cpp=$(SOBJDIR)/%.o)\n";
    out << "\n";
    out << "all: scripts lib\n";
    out << "\n";
    out << "scripts: $(BINARIES)\n";
    out << "lib: $(NAMELIB).so $(NAMELIB).a\n";
    out << "\n";
    out << "$(OBJDIR)/%.o: $(SRCDIR)/%.cpp\n";
    out << "	$(CXX) $(CFLAGS) -c $< -o $@ $(INCPATH)\n";
    out << "\n";
    out << "$(SOBJDIR)/%.o: $(SCRIPTDIR)/%.cpp\n";
    out << "	$(CXX) $(CFLAGS) -c $< -o $@ $(INCPATH)\n";
    out << "\n";
    out << "%.x: $(SOBJDIR)/%.o $(OBJ)\n";
    out << "	$(CXX) $(CFLAGS) -o $(BINDIR)/$@ $< $(OBJ) $(INCPATH) $(LIBPATH) $(LIBS)\n";
    out << "\n";
    out << "$(NAMELIB).so: $(OBJ)\n";
    out << "	$(CXX) $(CFLAGS) -shared -o $(LIBDIR)/$@ $(OBJ) $(LIBPATH) $(LIBS)\n";
    out << "$(NAMELIB).a: $(OBJ)\n";
    out << "	ar rcs $(LIBDIR)/$@ $(OBJ)\n";
    out << "\n";
    out << "clean:\n";
    out << "	rm $(OBJDIR)/*.o\n";
    out << "Clean:\n";
    out << "	$(MAKE) clean\n";
    out << "	rm $(BINDIR)/*.x\n";
}
